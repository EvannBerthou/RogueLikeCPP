#include "pathfinding.h"
#include <vector>

void find_path(vec2i start, vec2i goal, room_t *room) {
    node_t start_node = { start.x, start.y, -1,-1, 0,0,0};
    node_t end_node   = { goal.x,  goal.y,  -1,-1, 0,0,0};

    std::vector<node_t> open_list   = {};
    std::vector<node_t> closed_list = {};

    open_list.push_back(start_node);

    while (open_list.size() > 0) {
        node_t &current = open_list.at(0);
        int current_index = 0;
        for (int i = 0; i < (int)open_list.size(); ++i){
            node_t node = open_list.at(i);
            if (node < current) {
                current = node;
                current_index = i;
            }
        }

        open_list.erase(open_list.begin() + current_index);
        closed_list.push_back(current);

        if (&current == &end_node) {
            std::cout << "found" << std::endl;
        }

        std::vector<node_t> children = {};
        for (int i = -1; i < 1; ++i) {
            for (int j = -1; j < 1; ++j) {
                node_t new_node = {current.x + i, current.y + j, current.x, current.y, 0,0,0};
                children.push_back(new_node);
            }
        }

        for (auto &child: children) {
            for (auto &c: closed_list)
                if (&child == &c) continue;

            child.g_cost = current.g + 1;
            child.h_cost = 0;
            child.f_cost = child.g_cost + child.h_cost;

            for (auto &c: open_list) {
                if (&child == &c && c.g_cost < child.g_cost) continue;
            }
            open_list.push_back(child);
        }
    }
}
